local status_ok, luasnip = pcall(require, 'luasnip')
if not status_ok then
  return
end

local guards = function()
  local filename = vim.api.nvim_buf_get_name(0):match '^.+\\(.+)%..+$'
  return filename:gsub('([a-z])([A-Z])', '%1_%2'):upper() .. '_H'
end

local i = luasnip.insert_node
local s = luasnip.snippet
local t = luasnip.text_node
local f = luasnip.function_node
local rep = require('luasnip.extras').rep

luasnip.add_snippets('c', {
  s({
    trig = '#ig',
    name = 'Include guards',
    dscr = 'Create include guards',
  }, {
    t { '#ifndef ' },
    f(guards),
    t { '', '#define ' },
    f(guards),
    t { '', '', '' },
    i(0),
    t { '', '', '#endif /* ' },
    f(guards),
    t { ' */' },
  }),
  s({
    trig = 'test_setup_teardown_impl',
    name = 'Test setup and teardown implementation',
  }, {
    t {
      'static void TestSetup(void)',
      '{',
      '    #include "InitMocks.h"',
      '',
    },
    t { '    ' },
    i(1, 'prefixed_module_name'),
    t { '_Init(E_InitLevel_One);', '' },
    t { '    ' },
    rep(1),
    t { '_Init(E_InitLevel_Two);', '' },
    t { '    ' },
    rep(1),
    t { '_Init(E_InitLevel_Three);', '' },
    t { '}', '', 'static void TestTeardown(void)', '{', '    #include "VerifyDestroyMocks.h"', '}', '' },
  }),
  s({
    trig = 'test_setup_teardown_decl',
    name = 'Test setup and teardown declaration',
  }, {
    t {
      '/* setup for all tests (except init tests): init mocks and execute all init levels. */',
      'static void TestSetup(void);',
      '',
      '/* teardown for all tests (except init tests): verify and destroy mocks. */',
      'static void TestTeardown(void);',
      '',
    },
  }),
  s({
    trig = 'test_group',
    name = 'Test group setup including test group runner',
  }, {
    t { '/*-- ' },
    i(1, 'test group name'),
    t { ' --------------------------------------------------------*/', '' },
    t { '', 'TEST_GROUP(' },
    rep(1),
    t { ');', '' },
    t { '' },
    t { '', 'TEST_SETUP(' },
    rep(1),
    t { ')', '' },
    t { '{', '' },
    t { '', '    TestSetup();', '' },
    t { '}', '' },
    t { '', 'TEST_TEAR_DOWN(' },
    rep(1),
    t { ')', '' },
    t { '{', '' },
    t { '    TestTeardown();', '' },
    t { '}', '' },
    t { '', 'TEST(' },
    rep(1),
    t { ', ' },
    i(2, 'test name'),
    t { ')', '' },
    t { '{', '', '}', '' },
    t { '', 'TEST_GROUP_RUNNER(' },
    rep(1),
    t { ')', '' },
    t { '{', '' },
    t { '    RUN_TEST_CASE(' },
    rep(1),
    t { ', ' },
    rep(2),
    t { ');', '' },
    t { '}', '' },
  }),
  s({
    trig = 'cheader',
    name = 'C-header-file',
  }, {
    t {
      '/*******************************************************************************',
      ' * Copyright B. Braun Melsungen AG',
      ' * Project: Software GrIPS',
      ' ******************************************************************************/',
      '',
      '/** @addtogroup ',
    },
    i(1, '4_letter-component-abbreviation'),
    t {
      '',
      ' * @{',
      ' * @file',
      ' *',
      ' * @brief ',
      ' */',
      '',
      '#ifndef ',
    },
    f(guards),
    t { '', '#define ' },
    f(guards),
    t {
      '',
      '',
      '/******************************************************************************/',
      '/* INCLUDES                                                                   */',
      '/******************************************************************************/',
      '',
      '',
    },
    i(2),
    t {
      '',
      '',
      '/******************************************************************************/',
      '/* DEFINES                                                                    */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* TYPES                                                                      */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL CONSTANTS                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL VARIABLES                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL FUNCTION PROTOTYPES                                                 */',
      '/******************************************************************************/',
      '',
      '#endif /* ',
    },
    f(guards),
    t { ' */', '', '/** @} */' },
  }),
  s({
    trig = 'csource',
    name = 'C-source-file',
  }, {
    t {
      '/*******************************************************************************',
      ' * Copyright B. Braun Melsungen AG',
      ' * Project: Software GrIPS',
      ' ******************************************************************************/',
      '',
      '/** @addtogroup ',
    },
    i(1, '4-letter-component-abbreviation'),
    t {
      '',
      ' * @{',
      ' * @file',
      ' */',
      '',
      '/******************************************************************************/',
      '/* INCLUDES                                                                   */',
      '/******************************************************************************/',
      '',
      '',
    },
    i(2),
    t {
      '',
      '',
      '/******************************************************************************/',
      '/* DEFINES                                                                    */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* TYPES                                                                      */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL CONSTANTS                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL CONSTANTS                                                            */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL VARIABLES                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL VARIABLES                                                            */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL FUNCTION PROTOTYPES                                                  */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL FUNCTIONS                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL FUNCTIONS                                                            */',
      '/******************************************************************************/',
      '',
      '/** @} */',
    },
  }),
  s({
    trig = 'testsource',
    name = 'test-source-file',
  }, {
    t {
      '/*******************************************************************************',
      ' * Copyright B. Braun Melsungen AG',
      ' * Project: Software GrIPS',
      ' ******************************************************************************/',
      '',
      '/** @addtogroup ',
    },
    i(1, '4-letter-component-abbreviation'),
    t {
      '',
      ' * @{',
      ' * @file Unit tests of the ${TM_FILENAME} module.',
      ' */',
      '',
      '/******************************************************************************/',
      '/* INCLUDES                                                                   */',
      '/******************************************************************************/',
      '',
      '',
      '#include "${TM_FILENAME}.h"',
      '',
      '#include "GUTL_StandardCLib.h"',
      '#include "GUTL_Unity.h"',
      '#include "unity_fixture.h"',
    },
    t {
      '',
      '',
      '/******************************************************************************/',
      '/* DEFINES                                                                    */',
      '/******************************************************************************/',
      '',
    },
    i(2, 'init or not'),
    t {
      '',
      '/******************************************************************************/',
      '/* TYPES                                                                      */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL CONSTANTS                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL CONSTANTS                                                            */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* GLOBAL VARIABLES                                                           */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL VARIABLES                                                            */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL FUNCTION PROTOTYPES                                                  */',
      '/******************************************************************************/',
      '',
      '/******************************************************************************/',
      '/* LOCAL FUNCTIONS                                                            */',
      '/******************************************************************************/',
      '',
      '/** @} */',
    },
  }),
  s({
    trig = 'bugreport',
    name = 'bug report template for JIRA',
  }, {
    t { '', 'h2. *Background*', '' },
    i(1, 'Backround', ''),

    t { '' },
    t { '', 'h2. *Precondition*', '' },
    i(2, '* List preconditions here', ''),

    t { '' },
    t { '', 'h2. *Actions {steps to reproduce}*', '' },
    i(3, '* List steps to reproduce here', ''),

    t { '' },
    t { '', 'h2. *Actual result*', '' },
    i(4, '* Describe actual outcome here.', ''),

    t { '' },
    t { '', 'h2. *Expected result*', '' },
    i(5, '* Describe expected outcome here', ''),

    t { '' },
    t { '', 'h2. *Reproducibility*', '' },
    i(6, '* Add information about reproducibility {e.g. "100%", "3 out of 20" etc...}', ''),

    t { '' },
    t { '', 'h2. *Affected test case*', '' },
    i(7, '* Test type: RMM, SRS, Regression {leave the correct one{s} here only}', ''),
    i(8, '* List affected test cases here, if known', ''),

    t { '' },
    t { '', 'h2. *Related Requirements*', '' },
    i(9, '* *Quote* related requirements here, if known}', ''),
  }),
})
